import './polyfills.server.mjs';
import{X as n,g as i}from"./chunk-4OLHNY3Y.mjs";var r=class t{isLoggedInSubject=new i(!1);isLoggedIn$=this.isLoggedInSubject.asObservable();clientId="754883446528-25uejhng8n2g9hesfhrbsmt9jb996dd7.apps.googleusercontent.com";tokenClient;googleApiLoaded=!1;constructor(){this.waitForGoogleApi()}waitForGoogleApi(){if(typeof google<"u"&&google.accounts){this.googleApiLoaded=!0,this.initializeGoogleAuth();return}let e=setInterval(()=>{typeof google<"u"&&google.accounts&&(clearInterval(e),this.googleApiLoaded=!0,this.initializeGoogleAuth())},100);setTimeout(()=>{clearInterval(e),this.googleApiLoaded||console.error("Google API failed to load within timeout")},1e4)}login(e,o){return e==="demo"&&o==="password"?(this.isLoggedInSubject.next(!0),!0):!1}initializeGoogleAuth(){try{google.accounts.id.initialize({client_id:this.clientId,callback:e=>this.handleGoogleLogin(e)}),this.tokenClient=google.accounts.oauth2.initTokenClient({client_id:this.clientId,scope:"email profile",callback:e=>this.handleTokenResponse(e)})}catch(e){console.error("Error initializing Google Auth:",e)}}handleGoogleLogin(e){if(e.credential){let o=this.decodeJWT(e.credential);console.log("Google user:",o),this.isLoggedInSubject.next(!0)}}handleTokenResponse(e){if(e.error){console.error("Google OAuth error:",e.error);return}fetch("https://www.googleapis.com/oauth2/v3/userinfo",{headers:{Authorization:`Bearer ${e.access_token}`}}).then(o=>o.json()).then(o=>{console.log("User profile:",o),this.isLoggedInSubject.next(!0)})}decodeJWT(e){let l=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/");return JSON.parse(atob(l))}loginWithGoogle(){if(!this.googleApiLoaded){console.error("Cannot login with Google: API not loaded");return}this.tokenClient.requestAccessToken()}logout(){if(this.googleApiLoaded){let e=localStorage.getItem("email");e?google.accounts.id.revoke(e,()=>{this.isLoggedInSubject.next(!1)}):this.isLoggedInSubject.next(!1)}else this.isLoggedInSubject.next(!1)}getCurrentLoginStatus(){return this.isLoggedInSubject.value}static \u0275fac=function(o){return new(o||t)};static \u0275prov=n({token:t,factory:t.\u0275fac,providedIn:"root"})};export{r as a};
